'use client';

import React, { useState, useEffect } from 'react';
import { 
  Search, 
  MessageCircle, 
  FlaskConical, 
  Users, 
  DollarSign, 
  ShoppingCart, 
  FolderOpen,
  ExternalLink,
  Edit3,
  Plus,
  ChevronDown,
  ChevronUp,
  Settings
} from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { ResourceModal } from '@/components/ResourceModal';
import { SectionModal } from '@/components/SectionModal';

interface DocumentLink {
  id: string;
  title: string;
  url: string;
  description?: string;
  tags?: string[];
}

interface Section {
  id: string;
  title: string;
  icon: React.ReactNode;
  description: string;
  color: string;
  links: DocumentLink[];
}

const mockData: Section[] = [
  {
    id: 'communication',
    title: 'Communication Protocols',
    icon: <MessageCircle className="w-5 h-5" />,
    description: 'Best practices, escalation workflows, and team communication guidelines',
    color: 'bg-blue-50 border-blue-200 hover:bg-blue-100',
    links: [
      {
        id: '1',
        title: 'Daily Standup Template',
        url: 'https://docs.google.com/spreadsheets/d/example1',
        description: 'Meeting agenda and progress tracking',
        tags: ['daily', 'meetings']
      },
      {
        id: '2',
        title: 'Escalation Matrix',
        url: 'https://docs.google.com/spreadsheets/d/example2',
        description: 'Issue escalation paths and contacts',
        tags: ['urgent', 'contacts']
      },
      {
        id: '3',
        title: 'Communication Guidelines',
        url: 'https://docs.google.com/spreadsheets/d/example3',
        description: 'WhatsApp, email, and meeting protocols',
        tags: ['guidelines', 'protocols']
      }
    ]
  },
  {
    id: 'rd',
    title: 'R&D Workflows',
    icon: <FlaskConical className="w-5 h-5" />,
    description: 'Research logs, test protocols, and development processes',
    color: 'bg-purple-50 border-purple-200 hover:bg-purple-100',
    links: [
      {
        id: '4',
        title: 'Research Log Template',
        url: 'https://docs.google.com/spreadsheets/d/example4',
        description: 'Daily research activities and findings',
        tags: ['research', 'logs']
      },
      {
        id: '5',
        title: 'Testing Protocols',
        url: 'https://docs.google.com/spreadsheets/d/example5',
        description: 'Quality assurance and testing procedures',
        tags: ['testing', 'qa']
      },
      {
        id: '6',
        title: 'Development Roadmap',
        url: 'https://docs.google.com/spreadsheets/d/example6',
        description: 'Feature development timeline and priorities',
        tags: ['roadmap', 'development']
      }
    ]
  },
  {
    id: 'roles',
    title: 'Role Assignments',
    icon: <Users className="w-5 h-5" />,
    description: 'Team structure, responsibilities, and contact information',
    color: 'bg-green-50 border-green-200 hover:bg-green-100',
    links: [
      {
        id: '7',
        title: 'Team Directory',
        url: 'https://docs.google.com/spreadsheets/d/example7',
        description: 'Contact details and role descriptions',
        tags: ['contacts', 'roles']
      },
      {
        id: '8',
        title: 'Responsibility Matrix',
        url: 'https://docs.google.com/spreadsheets/d/example8',
        description: 'RACI matrix for key processes',
        tags: ['responsibilities', 'processes']
      },
      {
        id: '9',
        title: 'Skill Matrix',
        url: 'https://docs.google.com/spreadsheets/d/example9',
        description: 'Team skills and expertise mapping',
        tags: ['skills', 'expertise']
      }
    ]
  },
  {
    id: 'finance',
    title: 'Financial Logs',
    icon: <DollarSign className="w-5 h-5" />,
    description: 'Budget tracking, expenses, and revenue projections',
    color: 'bg-yellow-50 border-yellow-200 hover:bg-yellow-100',
    links: [
      {
        id: '10',
        title: 'Monthly Budget Tracker',
        url: 'https://docs.google.com/spreadsheets/d/example10',
        description: 'Income, expenses, and budget variance',
        tags: ['budget', 'monthly']
      },
      {
        id: '11',
        title: 'Expense Reports',
        url: 'https://docs.google.com/spreadsheets/d/example11',
        description: 'Detailed expense tracking and categorization',
        tags: ['expenses', 'reports']
      },
      {
        id: '12',
        title: 'Revenue Projections',
        url: 'https://docs.google.com/spreadsheets/d/example12',
        description: 'Sales forecasts and financial planning',
        tags: ['revenue', 'projections']
      }
    ]
  },
  {
    id: 'sourcing',
    title: 'Product Sourcing',
    icon: <ShoppingCart className="w-5 h-5" />,
    description: 'Vendor information, lead times, and cost comparisons',
    color: 'bg-orange-50 border-orange-200 hover:bg-orange-100',
    links: [
      {
        id: '13',
        title: 'Vendor Database',
        url: 'https://docs.google.com/spreadsheets/d/example13',
        description: 'Supplier contacts and evaluation criteria',
        tags: ['vendors', 'suppliers']
      },
      {
        id: '14',
        title: 'Cost Comparison Matrix',
        url: 'https://docs.google.com/spreadsheets/d/example14',
        description: 'Price analysis across multiple suppliers',
        tags: ['costs', 'comparison']
      },
      {
        id: '15',
        title: 'Lead Time Tracker',
        url: 'https://docs.google.com/spreadsheets/d/example15',
        description: 'Delivery schedules and timeline management',
        tags: ['delivery', 'timeline']
      }
    ]
  },
  {
    id: 'misc',
    title: 'Miscellaneous Resources',
    icon: <FolderOpen className="w-5 h-5" />,
    description: 'Additional documentation and useful resources',
    color: 'bg-gray-50 border-gray-200 hover:bg-gray-100',
    links: [
      {
        id: '16',
        title: 'Company Policies',
        url: 'https://docs.google.com/spreadsheets/d/example16',
        description: 'HR policies and company guidelines',
        tags: ['policies', 'hr']
      },
      {
        id: '17',
        title: 'Meeting Notes Archive',
        url: 'https://docs.google.com/spreadsheets/d/example17',
        description: 'Historical meeting records and decisions',
        tags: ['meetings', 'archive']
      },
      {
        id: '18',
        title: 'Resource Library',
        url: 'https://docs.google.com/spreadsheets/d/example18',
        description: 'Useful tools, templates, and references',
        tags: ['tools', 'templates']
      }
    ]
  }
];

export default function DocumentationHub() {
  const [searchTerm, setSearchTerm] = useState('');
  const [expandedSections, setExpandedSections] = useState<string[]>([]);
  const [adminMode, setAdminMode] = useState(false);
  const [sections, setSections] = useState<Section[]>(mockData);
  const [windowWidth, setWindowWidth] = useState(0);
  
  // Modal states
  const [resourceModal, setResourceModal] = useState({
    isOpen: false,
    mode: 'add' as 'add' | 'edit',
    resource: undefined as DocumentLink | undefined,
    sectionId: ''
  });
  
  const [sectionModal, setSectionModal] = useState({
    isOpen: false,
    mode: 'add' as 'add' | 'edit',
    section: undefined as Section | undefined
  });

  // Effect to handle window resize
  useEffect(() => {
    // Only run on client side
    if (typeof window !== 'undefined') {
      // Set initial window width
      setWindowWidth(window.innerWidth);
      
      // Add event listener for window resize
      const handleResize = () => {
        setWindowWidth(window.innerWidth);
      };
      
      window.addEventListener('resize', handleResize);
      
      // Clean up event listener
      return () => {
        window.removeEventListener('resize', handleResize);
      };
    }
  }, []);

  const filteredData = sections.map(section => ({
    ...section,
    links: section.links.filter(link =>
      link.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      link.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      link.tags?.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()))
    )
  })).filter(section => section.links.length > 0 || searchTerm === '');

  const toggleSection = (sectionId: string) => {
    setExpandedSections(prev =>
      prev.includes(sectionId)
        ? prev.filter(id => id !== sectionId)
        : [...prev, sectionId]
    );
  };

  const isExpanded = (sectionId: string) => expandedSections.includes(sectionId);

  const openLink = (url: string) => {
    window.open(url, '_blank', 'noopener,noreferrer');
  };

  // Resource CRUD operations
  const handleAddResource = (sectionId: string) => {
    setResourceModal({
      isOpen: true,
      mode: 'add',
      resource: undefined,
      sectionId
    });
  };

  const handleEditResource = (resource: DocumentLink, sectionId: string) => {
    setResourceModal({
      isOpen: true,
      mode: 'edit',
      resource,
      sectionId
    });
  };

  const handleSaveResource = (resource: DocumentLink) => {
    setSections(prev => prev.map(section => {
      if (section.id === resourceModal.sectionId) {
        if (resourceModal.mode === 'add') {
          return {
            ...section,
            links: [...section.links, resource]
          };
        } else {
          return {
            ...section,
            links: section.links.map(link => 
              link.id === resource.id ? resource : link
            )
          };
        }
      }
      return section;
    }));
  };

  const handleDeleteResource = (resourceId: string) => {
    setSections(prev => prev.map(section => {
      if (section.id === resourceModal.sectionId) {
        return {
          ...section,
          links: section.links.filter(link => link.id !== resourceId)
        };
      }
      return section;
    }));
  };

  // Section CRUD operations
  const handleAddSection = () => {
    setSectionModal({
      isOpen: true,
      mode: 'add',
      section: undefined
    });
  };

  const handleEditSection = (section: Section) => {
    setSectionModal({
      isOpen: true,
      mode: 'edit',
      section
    });
  };

  const handleSaveSection = (section: Section) => {
    if (sectionModal.mode === 'add') {
      setSections(prev => [...prev, { ...section, links: [] }]);
    } else {
      setSections(prev => prev.map(s => 
        s.id === section.id ? { ...s, ...section } : s
      ));
    }
  };

  const handleDeleteSection = (sectionId: string) => {
    setSections(prev => prev.filter(section => section.id !== sectionId));
  };

  const getSectionTitle = (sectionId: string) => {
    const section = sections.find(s => s.id === sectionId);
    return section?.title || 'Unknown Section';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
      {/* Header */}
      <header className="sticky top-0 z-50 bg-white/95 backdrop-blur-sm border-b border-gray-200 shadow-sm">
        <div className="max-w-6xl mx-auto px-4 py-4">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center">
                <FolderOpen className="w-5 h-5 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">DocHub</h1>
                <p className="text-sm text-gray-600">Central Documentation Hub</p>
              </div>
            </div>
            
            <div className="flex items-center gap-3">
              <div className="relative flex-1 sm:flex-initial">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                <Input
                  placeholder="Search documents..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 w-full sm:w-64"
                />
              </div>
              
              <Button
                variant={adminMode ? "default" : "outline"}
                size="sm"
                onClick={() => setAdminMode(!adminMode)}
                className="hidden sm:flex"
              >
                <Edit3 className="w-4 h-4 mr-2" />
                Admin
              </Button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-6xl mx-auto px-4 py-8">
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-lg text-gray-600 mb-2">Quick Access to Team Resources</h2>
              <p className="text-gray-500">
                Centralized access to all your team's Google Sheets and documentation. 
                Click any link to open in a new tab.
              </p>
            </div>
            
            {adminMode && (
              <Button onClick={handleAddSection} className="hidden sm:flex">
                <Plus className="w-4 h-4 mr-2" />
                Add Section
              </Button>
            )}
          </div>
        </div>

        {/* Mobile Admin Toggle */}
        <div className="sm:hidden mb-6 space-y-3">
          <Button
            variant={adminMode ? "default" : "outline"}
            size="sm"
            onClick={() => setAdminMode(!adminMode)}
            className="w-full"
          >
            <Edit3 className="w-4 h-4 mr-2" />
            {adminMode ? 'Exit Admin Mode' : 'Enter Admin Mode'}
          </Button>
          
          {adminMode && (
            <Button onClick={handleAddSection} className="w-full" variant="outline">
              <Plus className="w-4 h-4 mr-2" />
              Add New Section
            </Button>
          )}
        </div>

        {/* Sections Grid */}
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {filteredData.map((section) => (
            <Card 
              key={section.id} 
              className={`transition-all duration-200 ${section.color} border-2`}
            >
              <CardHeader className="pb-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className="p-2 bg-white rounded-lg shadow-sm">
                      {section.icon}
                    </div>
                    <div>
                      <CardTitle className="text-lg">{section.title}</CardTitle>
                      <Badge variant="secondary" className="text-xs">
                        {section.links.length} resources
                      </Badge>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-1">
                    {adminMode && (
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleEditSection(section)}
                        className="hidden sm:flex"
                      >
                        <Settings className="w-4 h-4" />
                      </Button>
                    )}
                    
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => toggleSection(section.id)}
                      className="md:hidden"
                    >
                      {isExpanded(section.id) ? 
                        <ChevronUp className="w-4 h-4" /> : 
                        <ChevronDown className="w-4 h-4" />
                      }
                    </Button>
                  </div>
                </div>
                
                <CardDescription className="text-sm">
                  {section.description}
                </CardDescription>
                
                {adminMode && (
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => handleEditSection(section)}
                    className="sm:hidden w-full mt-2"
                  >
                    <Settings className="w-4 h-4 mr-2" />
                    Edit Section
                  </Button>
                )}
              </CardHeader>

              <CardContent 
                className={`space-y-3 ${
                  windowWidth < 768 && !isExpanded(section.id) ? 'hidden' : 'block'
                }`}
              >
                {section.links.map((link) => (
                  <div
                    key={link.id}
                    className="group p-3 bg-white rounded-lg border border-gray-200 hover:border-gray-300 hover:shadow-md transition-all duration-200"
                  >
                    <div className="flex items-start justify-between gap-2">
                      <div 
                        className="flex-1 min-w-0 cursor-pointer"
                        onClick={() => openLink(link.url)}
                      >
                        <div className="flex items-center gap-2 mb-1">
                          <h4 className="font-medium text-gray-900 text-sm group-hover:text-blue-600 transition-colors">
                            {link.title}
                          </h4>
                          <ExternalLink className="w-3 h-3 text-gray-400 group-hover:text-blue-500 flex-shrink-0" />
                        </div>
                        
                        {link.description && (
                          <p className="text-xs text-gray-600 mb-2 line-clamp-2">
                            {link.description}
                          </p>
                        )}
                        
                        {link.tags && link.tags.length > 0 && (
                          <div className="flex flex-wrap gap-1">
                            {link.tags.map((tag) => (
                              <Badge 
                                key={tag} 
                                variant="outline" 
                                className="text-xs px-2 py-0.5 h-auto"
                              >
                                {tag}
                              </Badge>
                            ))}
                          </div>
                        )}
                      </div>
                      
                      {adminMode && (
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          className="opacity-0 group-hover:opacity-100 flex-shrink-0"
                          onClick={() => handleEditResource(link, section.id)}
                        >
                          <Edit3 className="w-3 h-3" />
                        </Button>
                      )}
                    </div>
                  </div>
                ))}

                {adminMode && (
                  <Button 
                    variant="outline"
                    className="w-full border-2 border-dashed border-gray-300 hover:border-gray-400 bg-transparent"
                    onClick={() => handleAddResource(section.id)}
                  >
                    <Plus className="w-4 h-4 mr-2" />
                    Add Resource
                  </Button>
                )}
              </CardContent>
            </Card>
          ))}
        </div>

        {filteredData.length === 0 && searchTerm && (
          <div className="text-center py-12">
            <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <Search className="w-6 h-6 text-gray-400" />
            </div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">No results found</h3>
            <p className="text-gray-600">
              Try adjusting your search terms or browse all categories above.
            </p>
          </div>
        )}

        {/* Footer */}
        <footer className="mt-16 py-8 border-t border-gray-200">
          <div className="text-center">
            <p className="text-sm text-gray-500">
              Built for startup teams • Last updated: {new Date().toLocaleDateString()}
            </p>
            <div className="flex items-center justify-center gap-4 mt-4">
              <Badge variant="outline" className="text-xs">
                {sections.reduce((acc, section) => acc + section.links.length, 0)} Total Resources
              </Badge>
              <Badge variant="outline" className="text-xs">
                {sections.length} Categories
              </Badge>
            </div>
          </div>
        </footer>
      </main>

      {/* Modals */}
      <ResourceModal
        isOpen={resourceModal.isOpen}
        onClose={() => setResourceModal(prev => ({ ...prev, isOpen: false }))}
        mode={resourceModal.mode}
        resource={resourceModal.resource}
        sectionTitle={getSectionTitle(resourceModal.sectionId)}
        onSave={handleSaveResource}
        onDelete={handleDeleteResource}
      />

      <SectionModal
        isOpen={sectionModal.isOpen}
        onClose={() => setSectionModal(prev => ({ ...prev, isOpen: false }))}
        mode={sectionModal.mode}
        section={sectionModal.section}
        onSave={handleSaveSection}
        onDelete={handleDeleteSection}
      />
    </div>
  );
}